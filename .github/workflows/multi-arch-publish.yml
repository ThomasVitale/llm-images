name: Build and Publish

on:
  workflow_call:
    inputs:
      context:
        description: "Folder with build context."
        required: true
        type: string
      image:
        description: "Name of the OCI image."
        required: true
        type: string
    secrets:
      push-token:
        description: "Image push token"
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE: thomasvitale/${{ inputs.image }}

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Check out source code
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          fetch-depth: 0
      
      - name: Generate Docker meta information
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          labels: |
            org.opencontainers.image.licenses='Apache-2.0'
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Login to container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.push-token }}
          registry: ${{ env.REGISTRY }}

      - name: Build and push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        id: build
        with:
          context: ${{ inputs.context }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: digests-${{ inputs.image }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    needs: [build]
    runs-on: ubuntu-24.04
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
    outputs:
      image-digest: ${{ steps.image-info.outputs.digest }}
      image-name: ${{ steps.image-info.outputs.name }}
    steps:

      - name: Prepare
        run: |
          timestamp=$(date +%Y%m%d-%H%M%S)
          echo "TIMESTAMP=${timestamp}" >> $GITHUB_ENV

      - name: Download digests
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: /tmp/digests
          pattern: digests-${{ inputs.image }}-linux*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382 # v3.6.0

      - name: Generate Docker meta information
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          labels: |
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
          tags: |
            type=raw,value=${{ env.TIMESTAMP }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long

      - name: Login to container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.push-token }}
          registry: ${{ env.REGISTRY }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE }}@sha256:%s ' *)       

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ steps.meta.outputs.version }}
      
      - name: Setup Arkade
        uses: alexellis/setup-arkade@b1816384b2260cfd2c023c6798d26075786cfc7f # v3

      - name: Install crane
        uses: alexellis/arkade-get@d5c58f37f95955f9132a791e477e3fdddb0cebd6 # master
        with:
          crane: v0.20.2
      
      - name: Get OCI image digest
        id: image-info
        run: |
          image_digest=$(crane digest ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ steps.meta.outputs.version }})
          echo $image_digest
          echo "IMAGE_DIGEST=${image_digest}" >> $GITHUB_ENV
          echo "digest=${image_digest}" >> $GITHUB_OUTPUT
          echo "name=${REGISTRY}/${IMAGE}" >> $GITHUB_OUTPUT

      - name: Sign image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE }}@${{ env.IMAGE_DIGEST }}

  provenance:
    needs: [ build, merge ]
    name: Generate SLSA Provenance Attestation
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    permissions:
      actions: read
      contents: write
      id-token: write
    with:
      image: ${{ needs.sign.outputs.image-name }}
      digest: ${{ needs.sign.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.push-token }}
